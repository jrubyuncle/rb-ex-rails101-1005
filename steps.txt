q. if 'rollback transaction', how to debug?

q. _navbar.html.erb
q. _footer.html.erb
q. notice_message() in application_helper.rb

redirect_to groups_path, notice: "modify group ok"
redirect_to groups_path, alert: "討論版已刪除"

q. http://courses.growthschool.com/courses/rails-101/lectures/229626
   why after redirect_to(), the :new and :create are not called

q. the difference between
   flash[:notice] = "xxx"
   redirect_to path(), notice: "xxx"

group - owner
post  - author


1002 30%
1005 51%  2.5 hrs
          2.0 hrs (ch5 posts crud)
1006 70%  3.0 hrs (ch6 devise)
1007 78%  3.5 hrs (ch7 join group, quit group)
1008 85%  2.0 hrs (ch8 backend)
1008 91%  1.0 hrs (ch9 refactor)
1008 95%  40 mins (ch10 db:seed)
1008              (ch11 deployment) 5:50

// -----------------------------------------------------------------
http://courses.growthschool.com/courses/rails-101/lectures/229590
ch1 scaffold      |               | 1016,  1   h | 1029, 45   m | 1102, 30 m (cp) | 
ch2 new project   |               | 1016, 20   m | 1029, 15   m | 1102, 20 m      | 
ch3 basic manually|               | 1016,  1   h | 1029, 30   m | 1102, 30 m      | 
ch4 crud manually |               | 1016,  1   h | 1029,  1.5 h | 1102,  1 h (cp) | 

ch5 posts crud    | 1006,  2   h  | 1018,  2   h | 1029,  1.5 h | 1102,  1h  (cp) | 
ch6 devise        | 1006,  3   h  | 1018,  3   h | 1030,  3   h | 1103,  2h5m     | 

ch7 join/quit grp | 1007,  3.5 h  | 1019,  3.5 h | 1030,  2   h | 1103,  1h5m     |
ch8 backend       | 1008,  2   h  | 1020,  2.6 h | 1030,  1.6 h | 1103,  1h4m     |

ch9 refactor      | 1008,  1   h  | 1028,  1   h | 1102, 30   m | 1105, 40 m      |
ch10 db:seed      | 1008, 40   m  | 1028,  1   h | 1102, 30   m | 1105, 30 m      |

ch11 deployment

// -----------------------------------------------------------------

ch1 [] scaffold + bootstrap
  ch1.1 [scaffold]                               30 mins
  ch1.2 [bootstrap]                              30 mins
  ch1.3 [進入正題]
  ch1.4 [延伸閱讀：CRUD]
ch2 [create rails101s]                           20 mins
ch3 [bootstrap, partial, notice_message]  1 hr
ch4 []
  ch4.1 [preset]                                 30 mins
  ch4.2 [crud w/o scaffold]                      30 mins (copy views code)
  ch4.3 [reading]                                 5 mins

ch5 [create posts in group]
  ch5.1 [goal + preset]                          20 mins
  ch5.2 []                                       35 mins
  ch5.3 [post crud]                       1 hr

ch6 [devise]       3 hr | 1103, 2 hr 5 mins | 
  ch6.1 []   1103, 1053-1143 =  1 hr
  ch6.2 []   1103, 1145-1210 = 25 mins
  ch6.3 []   1103, 1222-1232 = 10 mins
  ch6.4 []   1103, 1756-1826 = 30 mins

ch7 [join/quit group]  1103, 1 hr 5 mins |

  ch7.1 []
  ch7.2 [create join table: group_users]   1019, 1 hr   | 1030, 15 min| 1103, 20 mins
  ch7.3 [only group members can post]      1019, 1 hr   | 1030,  1 hr | 1103, 20 mins
  ch7.4 [join/quit group]                  1019, 1 hr   | 1030, 40 min| 1103, 35 mins
  ch7.5 [group creator -> members]         1019, 10 mins| 1030,  3 min| 1103,  3 mins
  ch7.6 [groups#show, edit only for owner] 1019, 10 mins| 1030,  7 min| 1103,  5 mins

ch8 [backend] 160 mins = 2 hrs 40 mins | 1103, 1h4m

  ch8.1 []
  ch8.2 []  1020, 25 mins | 1030, 27 mins        | 1103, 10 m      |  
  ch8.3 []  1020, 50 mins | 1030, 13 mins (copy) | 1103, 10 m (cp) |  
  ch8.4 []  1020, 40 mins | 1030, 30 mins        | 1103, 25 m (cp) |  
  ch8.5 []  1020, 10 mins | 1030,  5 mins        | 1103,  2 m      |  
  ch8.6 []  1020, 30 mins | 1030, 20 mins        | 1103, 15 m      |  
  ch8.7 []  1020,  5 mins | 1030, 10 mins        | 1103,  2 m      |   

ch9 [refactor]
ch10 [db:seed]
ch11 [deploy]


// -----------------------------------------------------------------

ch1 Hello World!!
第一章：Hello World!! --快速體驗 Rails

  ch1.1 快速體驗 Rails

  ch1.2 use bootstrap
        幫網站穿衣服：使用 Bootstrap 做前端套版

  ch1.3
        進入正題

  ch1.4
        延伸閱讀：CRUD

ch2 create a rails project
    第二章：創建一個 Rails 專案

ch3 establish blog site manually
    第三章：手動架構出討論版功能的基礎網站

ch4 create crud manually
    第四章：手動實作出有 CRUD 功能的討論版

  ch4.1 preset

  ch4.2
        不用 Scaffold 實作出有 CRUD 功能的 group

  ch4.3
        延伸閱讀：MVC 架構與 RESTful 概念

ch5 create posts in group
    第五章：可以在討論版裡發表文章

  ch5.1 goal + preset

  ch5.3 in group#show, display all posts
        可以在 Group 裡面 post 文章 ( controllers & views 設定 )

  ch5.4 post_crud: pre-set
        post 的 CRUD 設定

ch6 authentication
    第六章：建立使用者功能

  ch6.1

  ch6.2 add new field: name
        客製化 devise => 新增一個 "name" 的欄位

  ch6.3
        使用者功能 整合進 group / post 裡面 (作者機制)

  ch6.4
        只有作者才能有 group / post 的修改/刪除權限

ch7 user can join and quit groups
    第七章：user 可以加入、退出 group

ch8 backend
    第八章：實做簡單的後台機制

ch9 refactor
    第九章：Refactor Code 整理你的程式碼

  ch9.2.0
          翻修 View

  ch9.5.0
          翻修 Model

ch10 db:seed
     第十章：撰寫 db:seed 與 自動化重整資料庫程式

ch11 deploy to server
     第十一章：將寫好的專案部署 ( Deploy ) 到遠端 Server 上

// -----------------------------------------------------------------

http://courses.growthschool.com/courses/rails-101

ch1 Hello World!!
第一章：Hello World!! --快速體驗 Rails

ch1.1 快速體驗 Rails

ch1.1.1 create a whole new project
        建立一個全新的專案

  1. rails new first-app
     cd first-app
     git init
     git add .
     git commit -m"commit initial"

ch1.1.2 use scaffold
        使用鷹架( Scaffold )功能

  1. rails g scaffold topic title:string description:text
                      -----
               singular -> topic.rb
                           topics_controller.rb
                    table: topics
  2. rake db:migrate
  3. rails s
  4. connect to http://localhost:3000/topics with browser

ch1.1.3 (wrong: create welcome page,) create topics#welcome action
        (wrong: 建立 welcome 頁面)

  1. add 'welcome' action in topics_controller.rb

ch1.1.4 setup routes, direct /welcome to 'topics#welcome'
        設定 routes

  1. in routes.rb, add
       get 'welcome', to: 'topics#welcome'

ch1.1.5 create welcome.html.erb
        建立 welcome.html.erb

  1. create app/views/topics/welcome.html.erb
  2. content: <h1>Hello World! (welcome.html)</h1>

ch1.1.6 set root route: http://localhost:3000/topics
        設定首頁為 http://localhost:3000/topics

  1. in routes.rb, add
     root 'topics#index'

ch1.2 use bootstrap
幫網站穿衣服：使用 Bootstrap 做前端套版

ch1.2.1 install gem 'bootstrap-sass'
        安裝 gem 'bootstrap-sass'

  1. in Gemfile, add
       gem 'bootstrap-sass'
  2. run 'bundle'

ch1.2.2 install css packages in rails project
        將 Bootstrap 的 CSS 套件裝進專案裡面

  0. note: 1. rename and @import

  1. cd app/assets/stylesheets
     mv application.css  application.css.scss

  2. in application.css.scss, add
       @import "bootstrap-sprockets";
       @import "bootstrap";

  3. re-run 'rails s'

ch1.2.3 install navbar and footbar
        幫你的專案裝上 Navbar 跟 Footbar

  1. mkdir app/views/common

  2. create app/views/common/_navbar.html.erb
            app/views/common/_footer.html.erb

  3. in application.js, add
       //= require bootstrap/dropdown
       //= require bootstrap/alert

ch1.2.4 modify app/views/layouts/application.html.erb
        修改你的 app/views/layout/application.html.erb

  1. in application.html.erb, add
       <%= render "common/navbar" %>

       <%= yield %>

       <%= render "common/footer" %>

ch1.2.5 use bootstrap table package
        代入 bootstrap 的 table 套件

  0. note: just add class="xxx"

  1. in app/views/topics/index.html.erb
       <table class="table">

ch1.2.5-a fix bug that the style not changes

  1. mv app/assets/stylesheets/application.css app/assets/stylesheets/application.css.scss

ch1.3
進入正題

-- why should not use scaffold?

-- how to use this course for learning rails:

-- how to find help:

ch1.4
延伸閱讀：CRUD

** crud

** crud in rails

ch2 create a rails project
第二章：創建一個 Rails 專案

ch2.1 goal

  1. goal: 建置一個 Rails 專案 ( 版本 4.2.0 )
           安裝 gem: brakeman 跟 rails_best_practices
  2. gem i brakeman
     gem i rails_bets_practices

ch2.2 create new project

  1. make sure that ruby version is 2.1.2
       ruby -v

  2. make sure that rails version is 4.2.0
       gem install rails -v 4.2.0 --verbose

  3. create new project
       rails _4.2.0_ rails101s -T

ch3 establish blog site manually
第三章：手動架構出討論版功能的基礎網站

ch3.1 goal
      作業目標

  1. 本章的作業目標：

     建立一個討論版 (group)
     group 有 title 跟 description 二個欄位
     設定 routes 並建立首頁 => hello world!
     套入前端套件 Bootstrap
     建立 navbar 與 footer
     建立 notice_message

ch3.2 create group
      建立一個討論版(group)

ch3.2-a
  1. rails g controller groups

ch3.2-b
  2. rails g model group title:string description:text

ch3.2-c
  1. rake db:migrate

ch3.3 set routes; set home page
      設定 routes 並建立首頁 => hello world!

  1. in routes.rb, add
       root 'groups#index'
       resource 'groups'

  2. in groups_controller.rb, add
       def index
       end

  3. in app/views/groups/, create index.html.erb
       <h1>Hello World</h1>

ch3.4 use bootstrap
      套入前端套件 Bootstrap

  1. in Gemfile, add
       gem 'bootstrap-sass'                    // sAss

  2. run 'bundle install'
     保持一個原則： 動到除了 app 資料夾以外的檔案，都要重跑 rails s

  3. cd app/assets/stylesheets
     mv application.css application.css.scss   // css -> Scss

  4. in application.css.scss, add
       @import "bootstrap-sprockets";
       @import "bootstrap";

ch3.5 create navbar and footbar
      建立頁面的 navbar 與 footer

  1. create new folder 'common' under app/views/

  2. in folder app/views/common, create
       _navbar.html.erb
       _footer.html.erb

  3. _navbar.html.erb

       <nav class="navbar navbar-default" role="navigation">
         <div class="container-fluid">
           <div class="navbar-header">
             <a class="navbar-brand" href="/">Rails 101s</a>
           </div>
           <div class="collapse navbar-collapse">
             <ul class="nav navbar-nav navbar-right">
               <li> <%= link_to("登入", '#') %> </li>
             </ul>
           </div>
         </div>
       </nav>

  4. _footer.html.erb

       <nav class="navbar navbar-default" role="navigation">
         <div class="container-fluid">
           <div class="navbar-header">
             <a class="navbar-brand" href="/">Rails 101s</a>
           </div>
           <div class="collapse navbar-collapse">
             <ul class="nav navbar-nav navbar-right">
               <li> <%= link_to("登入", '#') %> </li>
             </ul>
           </div>
         </div>
       </nav>

  5. in app/assets/javascripts/application.js
       //= require turbolinks
       //= require bootstrap/dropdown    <--- add
       //= require bootstrap/alert       <--- add
       //= require_tree .

  6. in app/views/layouts/application.html.erb
       <%= render "common/navbar" %>     <--- add
       <%= yield %>
       <%= render "common/footer" %>     <--- add

ch3.6 notice_message
      建立 notice_message

  1. in app/helpers/application_helper/rb, add

       def notice_message
         alert_types = { notice: :success, alert: :danger }

         close_button_options = { class: "close", "data-dismiss" => "alert", "aria-hidden" => true }
         close_button = content_tag(:button, "×", close_button_options)

         alerts = flash.map do |type, message|
           alert_content = close_button + message

           alert_type = alert_types[type.to_sym] || type
           alert_class = "alert alert-#{alert_type} alert-dismissable"

           content_tag(:div, alert_content, class: alert_class)
         end

         alerts.join("\n").html_safe
       end

  2. in app/views/layouts/application.html.erb

       <%= render "common/navbar" %>
       <%= notice_message %>            <--- add
       <%= yield %>
       <%= render "common/footer" %>

  3. in index method of groups_controller.rb

       def index
         flash[:notice] = "good morning"
         flash[:warning] = "this is warning"
         flash[:my_test] = "my_test"
       end

ch4 create crud manually
第四章：手動實作出有 CRUD 功能的討論版

ch4.1 preset

ch4.1.1
  1. goal
       安裝 gem "simple_form"
       不用 Scaffold 實作出有 CRUD 功能的 group
       連前端網頁部分也做完
       資料驗證 => title 欄位不能空白

ch4.1.2 install gem 'simple_form'
        安裝 gem "simple_form"

  1. in Gemfile, add
       gem 'simple_form'

  2. run 'bundle install'

  3. rails g simple_form:install --bootstrap

ch4.1.3 pre-set: controller, add actions in groups controller
      ​  前置設定: controller

  1. in groups_controller.rb, add
       def show
       end

       def new
       end

       def create
       end

       def edit
       end

       def update
       end

       def destroy
       end

ch4.1.4 pre-set views:
        前置設定: Views

  1. in app/views/groups, create files:
       show.html.erb
       new.html.erb
       edit.html.erb

ch4.2
      不用 Scaffold 實作出有 CRUD 功能的 group

ch4.2.1 set index action, groups#index
      建立 Index action

  1. in index method of groups_controller.rb
       @groups = Group.all

  2. in app/views/groups/index.html.erb, add

       <h1>Hello World</h1>
       <div class="col-md-12">
           <div class="group">
             <%= link_to("New group", new_group_path, class: "btn btn-primary pull-right") %>
           </div>
           <table class="table table-hover">
             <thead>
               <tr>
                 <td>#</td>
                 <td>Title</td>
                 <td>Description</td>
               </tr>
             </thead>
             <tbody>
               <% @groups.each do |group| %>
                   <tr>
                   <td>#</td>
                   <td><%= link_to(group.title, group_path(group)) %></td>
                   <td><%= group.description %></td>
                   <td>
                       <%= link_to("Edit", edit_group_path(group), class: "btn btn-sm btn-default")%>
                       <%= link_to("Delete", group_path(group),    class: "btn btn-sm btn-default",
                                   method: :delete, data: { confirm: "Are you sure?" } )%>
                 </td>
                 </tr>
               <% end %>
             </tbody>
           </table>
         </div>

ch4.2.2 create new action, groups#new
        建立 New action


  1. in new method of groups_controller.rb, add
       dev new
         @group = Group.new
       end

  2. in app/views/groups/new.html.erb
       <div class="col-md-4 col-md-offset-4">
         <h1>新增討論版</h1>

         <hr>
         <%= simple_form_for @group do |f| %>
           <div class="form-group">
             <%= f.input :title, input_html: { class: "form-control"} %>
             <%= f.input :description, input_html: { class: "form-control"} %>
           </div>
           <%= f.submit "Submit", class: "btn btn-primary", data: { disable_with: "Submitting..." } %>
         <% end %>
       </div>

ch4.2.3 create 'create' action
        建立 Create action

  1. in create method of groups_controller.rb, add
       def create
         @group = Group.new(group_params)
         if @group.save
           redirect_to groups_path
           #redirect_to group_path(@group)
         else
           render :new
         end
       end

       private
       def group_params
         params.require(:group).permit(:title, :description)
       end

ch4.2.4 create 'show' action
        建立 Show action

  1. in show method of groups_controller.rb
       def show
         @group = Group.find(params[:id])
       end

  2. in app/views/groups/show.html.erb
       <div class="col-md-12">
         <div class="group">
           <%= link_to("Edit", edit_group_path(@group), class: "btn btn-primary pull-right")%>
         </div>

         <h2><%= @group.title %></h2>
         <p><%= @group.description %></p>
       </div>

ch4.2.5 create 'edit action'
        建立 Edit Action

  1. in edit method of groups_controller.rb
       def edit
         @group = Group.find(params[:id])
       end

  2. in app/views/groups/edit.html.erb
       <div class="col-md-4 col-md-offset-4">
         <h1>修改討論版</h1>

         <hr>
         <%= simple_form_for @group do |f| %>
           <div class="form-group">
             <%= f.input :title, input_html: { class: "form-control"} %>
             <%= f.input :description, input_html: { class: "form-control"} %>
           </div>
           <%= f.submit "Submit", class: "btn btn-primary", data: { disable_with: "Submitting..." } %>
         <% end %>
       </div>

ch4.2.6 create 'update' action
        建立 Update action

  1. in update method of groups_controller.rb
       def update
         @group = Group.find(params[:id])
         if @group.update(group_params)
           redirect_to groups_path, notice: 'update ok'
         else
           render :update
         end
       end

ch4.2.7 create 'destroy' action
        建立 Destroy action

  1. in destroy method of groups_controller.rb
       def destroy
         @group = Group.find(params[:id])
         @group.destroy
         redirect_to groups_path, alert: 'this group is deleted'  # <--- use alert: 'msg'
       end

ch4.2.8 outcome
        成果

  1. complete groups_controller.rb

class GroupsController < ApplicationController
  def index
    @groups = Group.all
  end

  def new
    @group = Group.new
  end

  def show
    @group = Group.find(params[:id])
  end

  def edit
    @group = Group.find(params[:id])
  end

  def create
    @group = Group.create(group_params)

    if @group.save
      redirect_to groups_path
    else
      render :new
    end
  end

  def update
    @group = Group.find(params[:id])

    if @group.update(group_params)
      redirect_to groups_path, notice: "group updated ok"
    else
      render :edit
    end
  end

  def destroy
    @group = Group.find(params[:id])
    @group.destroy
    redirect_to groups_path, alert: "group destroyed ok"
  end

  private

  def group_params
    params.require(:group).permit(:title, :description)
  end
end

ch4.2.9 validates
        資料驗證: title 不能空白

  1. title can not be blank
       validates :title, presence: true

- mvc and restful

-- http request and http verb
-- mvc architecture
-- rails flow
-- project development and security
-- rails/restful
-- deep on crud
-- strong parameter

ch4.3
      延伸閱讀：MVC 架構與 RESTful 概念

ch4.3.1 http request and http verb
ch4.3.2 mvc
ch4.3.3 rails flow
ch4.3.4 security
ch4.3.5 restful
ch4.3.6 crud, controller and model
ch4.3.7 strong parameter


ch5 create post in group
第五章：可以在討論版裡發表文章

ch5.1 goal + preset

ch5.1.1 chapter goal
        作業目標
  1.
       本章的作業目標：

       - 可以在 Group 裡面 post 文章
       - 並且文章網址是使用 /group/1/post/2 這種網址表示。
       - 資料驗證： post 必須要有內容才能儲存 / 新增
       - 用 before_action 來整理重複的程式碼

ch5.1.2 pre-set
        前置作業 ( model, routes )

ch5.1.2-a
  1. rails g controller posts

ch5.1.2-b
  1. rails g model post content:text group_id:integer

ch5.1.2-c
  1. rake db:migrate

ch5.1.2-d
  1. in config/routes.rb
       resources 'groups' do
         resources 'posts'
       end

  2. rake routes

         Prefix Verb   URI Pattern                                Controller#Action
           root GET    /                                          groups#index

    group_posts GET    /groups/:group_id/posts(.:format)          posts#index
                POST   /groups/:group_id/posts(.:format)          posts#create
 new_group_post GET    /groups/:group_id/posts/new(.:format)      posts#new
edit_group_post GET    /groups/:group_id/posts/:id/edit(.:format) posts#edit
     group_post GET    /groups/:group_id/posts/:id(.:format)      posts#show
                PATCH  /groups/:group_id/posts/:id(.:format)      posts#update
                PUT    /groups/:group_id/posts/:id(.:format)      posts#update
                DELETE /groups/:group_id/posts/:id(.:format)      posts#destroy

         groups GET    /groups(.:format)                          groups#index
                POST   /groups(.:format)                          groups#create
      new_group GET    /groups/new(.:format)                      groups#new
     edit_group GET    /groups/:id/edit(.:format)                 groups#edit
          group GET    /groups/:id(.:format)                      groups#show
                PATCH  /groups/:id(.:format)                      groups#update
                PUT    /groups/:id(.:format)                      groups#update
                DELETE /groups/:id(.:format)                      groups#destroy

ch5.1.2-e
  1. set relationship

       class Group < ActiveRecord::Base
         validates :title, presence: true

         has_many: :posts
       end


       class Post < ActiveRecord::Base
         belongs_to :group
       end

ch5.2 in group#show, display all posts
      可以在 Group 裡面 post 文章 ( controllers & views 設定 )

  1. in groups_controller.rb
       def show
         @group = Group.find(params[:id])
         @posts = @group.posts              # <--- add
       end

  2. in app/views/groups/show.html.erb, add

       <table class="table">
         <thead>
           <tr>
             <th>文章(posts)</th>
             <th colspan="2"></th>
           </tr>
         </thead>
         <tbody>
           <% @posts.each do |post| %>
             <tr>
               <td><%= post.content %></td>
               <td>
                 <%= link_to("Edit", edit_group_post_path(post.group, post),
                             class: "btn btn-default btn-xs")%>

                 <%= link_to("Delete", group_post_path(post.group, post),
                             class: "btn btn-default btn-xs ", method: :delete,
                             data: { confirm: "Are you sure?" } )%>
               </td>
             </tr>
           <% end %>
         </tbody>
       </table>

ch5.3 crud of post
      post 的 CRUD 設定


ch5.3.1 post_crud: pre-set
        前置
        post 的 CRUD 設定

  1. in posts_controller.rb, add
       def new
       end

       def create
       end

       def edit
       end

       def update
       end

       def destroy
       end

  2. in app/views/posts/, create
       new.html.erb
       edit.html.erb

ch5.3.2 'new' action
        建立 New action

ch5.3.3 post_crud: create 'create' action
        建立 Create action

ch5.3.3-a
  1. in show.html.erb of groups controller, add
       <%= link_to('new post', new_group_post_path(@group) , class: "btn btn-warning pull-right") %>

ch5.3.3-b
  1. in posts_controller.rb, add
       def new
         @group = Group.find(params[:group_id])
         @post = @group.posts.new
       end

ch5.3.3-c
  1. in posts_controller.rb, add

       def create
         @group = Group.find(params[:group_id])
         @post = @group.posts.create(post_params)

         if @post.save
           redirect_to group_path(@group), notice: 'create post ok'
         else
           render :new
         end
       end

       private

       def post_params
         params.require(:post).permit(:content)
       end

ch5.3.4 post_crud: create 'edit'/'update' action
        建立 Edit & Update action

ch5.3.4-a
  1. in posts_controller.rb, add
       def edit
         @group = Group.find(params[:group_id])
         @post = @group.posts.find(params[:id])
       end

  2. edit.html.erb
       <h1 class="text-center">Edit 文章</h1>

       <div class="col-md-4 col-md-offset-4">
         <%= simple_form_for [@group,@post] do |f| %>
           <div class="form-group">
             <%= f.input :content, input_html: { class: "form-control"} %>
           </div>
           <div class="form-actions">
             <%= f.submit "Submit", disable_with: "Submiting...", class: "btn btn-primary"%>
           </div>
         <% end %>
       </div>

ch5.3.4-b
  1. in posts_controller.rb, add

  def update
    @group = Group.find(params[:group_id])
    @post = @group.posts.find(params[:id])

    if @post.update(post_params)
      redirect_to group_path(@group), notice: 'update post ok'
    else
      render :update
    end
  end

ch5.3.5 post_crud: create 'destroy' action
        建立 Destroy action

  1. in posts_controller.rb

       def destroy
         @group = Group.find(params[:group_id])
         @post = @group.posts.find(params[:id])

         @post.destroy
         redirect_to group_path(@group), alert: 'post destroyed'
       end

ch5.3.6 post_crud: validates, store/creat post only if nonempty
        料驗證： post 必須要有內容才能儲存 / 新增

  1. content can not be empty

      class Post < ActiveRecord::Base
        belongs_to :group
        validates :content, presence: true
      end

ch5.3.7 post_crud: use befroe_action
        用 before_action 來整理重複的程式碼

  1. in posts_controller.rb

       before_action :find_group

       def find_group
         @group = Group.find(params[:group_id])
       end

ch6 authentication
    第六章：建立使用者功能

ch6.1 gaol + install devise

ch6.1.1 goal
        作業目標

  1. chapter goal
       本章的作業目標:

       安裝 gem "devise"
       在 navbar 安裝登入/登出按鈕
       調整修改 devise views ( 註冊, 登入, 修改帳號頁面, ... etc)
       利用 before_action :authenticate_user! 來做要求登入的設定
       客製化 devise => 新增一個 "name" 的欄位
       使用者功能 整合進 group / post 裡面 (作者機制)
       只有作者才能有 group / post 的修改/刪除權限

ch6.1.2 install gem 'devise'
        安裝 gem "devise"

ch6.2-a
  1. add gem 'devise'
  2. bundle install

ch6.2-b
  1. rails g devise:install

      create  config/initializers/devise.rb
      create  config/locales/devise.en.yml
===============================================================================

Some setup you must do manually if you haven't yet:

  1. Ensure you have defined default url options in your environments files. Here
     is an example of default_url_options appropriate for a development environment
     in config/environments/development.rb:

       config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }

     In production, :host should be set to the actual host of your application.

  2. Ensure you have defined root_url to *something* in your config/routes.rb.
     For example:

       root to: "home#index"

  3. Ensure you have flash messages in app/views/layouts/application.html.erb.
     For example:

       <p class="notice"><%= notice %></p>
       <p class="alert"><%= alert %></p>

  4. If you are deploying on Heroku with Rails 3.2 only, you may want to set:

       config.assets.initialize_on_precompile = false

     On config/application.rb forcing your application to not access the DB
     or load models when precompiling your assets.

  5. You can copy Devise views (for customization) to your app by running:

       rails g devise:views

===============================================================================


ch6.2-c
  1. rails g devise user

ch6.2-d
  1. rake db:migrate

ch6.2-e
  1. rails g devise:views

ch6.1.3 add login/logout button in navbat
        在 navbar 安裝登入/登出按鈕


  1. add login/register buttons in _navbar.html.erb

        <% if !current_user %>
          <li><%= link_to("register", new_user_registration_path)%></li>
          <li><%= link_to("login", new_user_session_path)%></li>
        <% else %>
          <li class="dropdown">
            <a href="#" class="dropdown-toggle" data-toggle="dropdown">
              Hi, <%= current_user.email %>
              <b class="caret"></b>
            </a>
              <ul class="dropdown-menu">
                <li><%= link_to("logout", destroy_user_session_path, method: :delete) %></li>
              </ul>
          </li>
        <% end %>

ch6.1.4 before_action: authenticate_user!
        利用 before_action :authenticate_user! 來做要求登入的設定

  1. in groups and posts controller, add
       before_action :authenticate_user!, only: [:new, :edit, :create, :update, :destroy]

ch6.2 客製化 devise => 新增一個 "name" 的欄位

ch6.2.1 add new field: name
        客製化欄位：name

  1. rails g migration add_name_to_users name:string

  2. rake db:migrage

ch6.2.2 display name in devise view
        客製化 devise 的 views => 註冊頁面新增 name 欄位

  1. in app/views/devise/registrations/new.html.erb

       <%= f.input :email, required: true, autofocus: true %>
       <%= f.input :name,  required: true %>                    # <--- add

ch6.2.3 add strong parameters
        加入 strong_parameters 與 devise 整合的 hack

  1. in application_controller.rb

       before_action :configure_permitted_parameters, if: :devise_controller?

       protected
       def configure_permitted_parameters
         devise_parameter_sanitizer.for(:sign_up) do |u|
           u.permit(:name, :email, :password, :password_confirmation)
         end
       end

ch6.2.4 in navbar, hi! email -> hi! name
        navbar 上的 hi! email 改成 hi! name

  1.    Hi, <%= current_user.email %>
     -> Hi, <%= current_user.name %>

ch6.2.5 add 'account setting' and modify the setting of self
        新增 "帳號設定" 功能，並能修改自己帳號的 name

  1. add "account setting", edit_user_registration_path

ch6.3 使用者功能 整合進 group / post 裡面 (作者機制)

ch6.3.1 add user_id in groups table
        group 資料表新增 user_id 欄位

  1. rails g migration add_user_id_to_groups user_id:integer
  2. rake db:migrate

ch6.3.2 set assocation
        設定 user 跟 group 之間的資料庫關聯 ( database relationship )

  1. group belongs_to :user
  2. user  has_many :groups


ch6.4 只有作者才能有 group / post 的修改/刪除權限


ch6.4.1 only author cam edit/destroy group/post
        只有作者才能有 group / post 的修改/刪除權限

  1. replace Group with current_user.groups

ch6.4.2 modify view, only author can edit/delete
        修改 view => 只有作者才會出現 edit / delete 按鈕

  1. show edit/delete buttons only if author

ch6.4.3 only author can edit/delete post
       只有作者才能有 post 的修改/刪除權限

ch6.4.3-a
  1. add user_id column to table posts
       rails g migration add_user_id_to_post user_id:integer
       rake db:migrate

ch6.4.3-b
  1. display edit/delete buttons only for post author

ch7 user can join and quit groups
第七章：user 可以加入、退出 group

ch7.1 goal

  1. chapter goal
       本章的作業目標:

       建立 討論版成員 ( group_user ) 設定
       user 必須要是這個社團的成員才能發表文章
       user 可以在 group 頁面 加入 / 退出 此 group
       User 在建立 group 後自動成為 group 的一員
       若不是 group 創辦人，就不會顯示 edit 按鈕

ch7.2 group_user

ch7.2-a
  1. rails g model group_user group_id:integer user_id:integer
  2. rake db:migrate

ch7.2-b
  1. set many-to-many association between user and group

ch7.3 only group member can create post

  1. only group members can create post

ch7.4 allow user to join or quit group

  1. display 'join group'/'quit group' buttons in view of groups#show

ch7.5 add group creator to group member by default

  1. add group creator to group members automatically

ch7.6 in view of groups#show, display edit/delete button only if author

ch8 backend
第八章：實做簡單的後台機制

ch8.1 chapter goal

  1. chapter goal
       本章的作業目標:

       建立使用者後台 ( 前置作業 )
       使用者可以在後台看到自己參加的 group
       使用可以在後台看到自己發表的 post
       post 的排列要以時間 (最新 => 最舊) 順序排列
       group 的排列要以 文章數量 當熱門度排列
       bug 解決 => 當 group 刪除時，所屬的 posts 也要跟著刪除

ch8.2 support localhost:3000/account/groups and account/posts
  1. in config/routes.rb
       namespace :account do
         resources :groups
         resources :posts
       end

  2. controllers
       rails g controller account/groups
       rails g controller account/posts

  3. views
       app/views/account/groups/index.html.erb
       app/views/account/posts/index.html.erb

ch8.3 list the groups the user joined, including title, description, post count, last update

  1. in account/groups_controller.rb
       before_action :authenticate_user!

       def index
         @groups = current_user.participated_groups
       end

  2. in app/views/account/groups/index.html.erb
       <div class="col-md-12">

       <h2 class="text-center">The Groups Joined</h2>

       <table class="table">
         <thead>
           <tr>
             <th>#</th>
             <th>Title</th>
             <th>Description</th>
             <th>Post Count</th>
             <th>Last Update</th>
           </tr>
         </thead>

         <tbody>
           <% @groups.each do |group| %>
             <tr>
               <td>#</td>
               <td><%= link_to(group.title, group_path(group)) %></td>
               <td><%= group.description %></td>
               <td><%= group.posts.count %></td>
               <td><%= group.updated_at %></td>
             </tr>
           <% end %>
         </tbody>
       </table>
       </div>

ch8.4 list the posts the user post

ch8.5 list the posts desc
  1. in account/posts_controller.rb
       def index
         @posts = current_user.posts.order("updated_at DESC")
       end

ch8.6 add posts_count in group model

ch8.7 fix bug: in group model, has_many :posts, dependant: :destroy

ch9 refactor
第九章：Refactor Code 整理你的程式碼

ch9.1 chapter goal

  1. chapter goal
     http://courses.growthschool.com/courses/rails-101/lectures/229668
       本章的作業目標:

       使用系統 helper 整理 code
       自己撰寫的 helper 包裝 html
       使用 partial 整理 html
       使用 scope 整理 query

ch9.2
翻修 View

ch9.2.1 use helper
        使用 '系統 helper' 整理 code
        http://courses.growthschool.com/courses/rails-101/lectures/229669

  1. post.updated_at.to_s(:long)
  2. simple_format(post.content)
  3. truncate(group.title, length: 15)

ch9.2.2 write helper to create html
        自己撰寫的 helper 包裝 html
        http://courses.growthschool.com/courses/rails-101/lectures/229675

  1. create helper in app/helper/posts_helper.rb
       module PostsHelper
         def render_post_content(post)
           simple_format(post.content)
         end
       end

ch9.2.3 use partial: extract common code to partial
        使用 partial 整理 html
        http://courses.growthschool.com/courses/rails-101/lectures/229676

ch9.3
翻修 Model

ch9.3.1 refactor model: use scope
        使用 scope 整理 query
        http://courses.growthschool.com/courses/rails-101/lectures/229677

  1. in post.rb, scope :recent, -> { order("updated_at DESC") }

ch10 db:seed
第十章：撰寫 db:seed 與 自動化重整資料庫程式

ch10.1 chapter goal
      作業目標
      http://courses.growthschool.com/courses/rails-101/lectures/229678

  1. chapter goal
       本章的作業目標:

       rake 的概念解說
       撰寫 seed.rb 檔
       撰寫 rake dev:build => 自動化執行清空 + 重跑 migration + 種子載入資料

ch10.2 rake concept: review rake command
       rake 的概念解說
       http://courses.growthschool.com/courses/rails-101/lectures/229679

  1. rake -T
  2. rake db:migrate

ch10.3 write seeds.rb, rake db:seed, rake db:reset
      撰寫 seed.rb 檔
      http://courses.growthschool.com/courses/rails-101/lectures/229680

  1. rake db:reset
       rake db:reset 是內建的 task ，會執行一整套流程, 包含
          db:drop        ( 資料庫移除 )
       => db:create      ( 資料庫建立 )
       => db:schema:load ( 資料庫欄位建立 )
       => db:seed        ( 執行資料庫種子 )

ch10.4 create lib/tasks/dev.rake
       撰寫 rake dev:build => 自動化執行清空 + 重跑 migration + 種子載入資料
       http://courses.growthschool.com/courses/rails-101/lectures/229693

  1. content
       namespace :dev do
         desc "Rebuild system"
         task :build => ["tmp:clear", "log:clear", "db:drop", "db:create", "db:migrate"]
         task :rebuild => ["dev:build", "db:seed"]
       end

ch11 deploy to server
第十一章：將寫好的專案部署 ( Deploy ) 到遠端 Server 上

ch11.1 chapter goal
       作業目標
       http://courses.growthschool.com/courses/rails-101/lectures/229694

  1. chapter goal
     本章的作業目標:

     用手動的方式將寫好的 Rails 專案 deploy 到遠端 Server 上
     改 Capristrano 自動化部署，一個指令完成 Deploy

ch11.2 deploy manually
       用手動的方式將寫好的 Rails 專案 deploy 到遠端 Server 上
       http://courses.growthschool.com/courses/rails-101/lectures/229695

ch11.3 production setup
       Production 端設定
       http://courses.growthschool.com/courses/rails-101/lectures/229696

ch11.4 capristrano
       改 Capristrano 自動化部署，一個指令完成 Deploy
       http://courses.growthschool.com/courses/rails-101/lectures/229697

ch11.5 note
       http://courses.growthschool.com/courses/rails-101/lectures/229917
